
#visualizzazione satellitare in R da imageRy
#tutte le funzioni di imageRy comincia con im.

library(terra) #richiamo pacchetti terra
library(imageRy) #richiamo pacchetto imageRy

#Lista di tuttr i dati disponibili in imageRy, elenca tutti i dataset disponibili su imagery
im.list()

#importo i data presenti su imageRy in R
im.import("matogrosso_ast_2006209_lrg.jpg")

#i file .tif sono immagini raster che comtemgono immagini spettrali
b2 <- im.import("sentinel.dolomites.b2.tif") 


#colorRampPalette Queste funzioni sono utili per convertire schemi di colori "sequenziali" o "divergenti" 
#progettati a mano in scale di colori continue
#Qui, colorRampPalette crea una scala di colori che va dal nero al grigio chiaro, con 100 gradazioni.
cl <- colorRampPalette(c("black", "grey", "light grey")) (100)
#La funzione plot visualizza ciascuna banda (b2, b3, b4, b8) utilizzando la scala di colori definita.
plot(b2, col=cl)

# import the green band from Sentinel-2 (band 3)
b3 <- im.import("sentinel.dolomites.b3.tif") 
plot(b3, col=cl)

# import the red band from Sentinel-2 (band 4)
b4 <- im.import("sentinel.dolomites.b4.tif") 
plot(b4, col=cl)

# import the NIR band from Sentinel-2 (band 8)
b8 <- im.import("sentinel.dolomites.b8.tif") 
plot(b8, col=cl)

# multiframe frow <- Dato un numero di grafici n, trovare una disposizione per mostrare i grafici in un array.
par(mfrow=c(2,2)) 
plot(b2, col=cl)
plot(b3, col=cl)
plot(b4, col=cl)
plot(b8, col=cl)

# stack images
stacksent <- c(b2, b3, b4, b8)
dev.off() # it closes devices
plot(stacksent, col=cl)

plot(stacksent[[4]], col=cl)

# Exercise: plot in a multiframe the bands with different color ramps
par(mfrow=c(2,2))

clb <- colorRampPalette(c("dark blue", "blue", "light blue")) (100)
plot(b2, col=clb)

clg <- colorRampPalette(c("dark green", "green", "light green")) (100)
plot(b3, col=clg)

clr <- colorRampPalette(c("dark red", "red", "pink")) (100)
plot(b4, col=clr)

cln <- colorRampPalette(c("brown", "orange", "yellow")) (100)
plot(b8, col=cln)

# RGB space
# stacksent: 
# band2 blue element 1, stacksent[[1]], la banda numero 2 del blu corrisponde al primo elemento di stacksent
# band3 green element 2, stacksent[[2]]
# band4 red element 3, stacksent[[3]]
# band8 nir element 4, stacksent[[4]]
im.plotRGB(stacksent, r=3, g=2, b=1)   #visualizzazione reale 
im.plotRGB(stacksent, r=4, g=3, b=2)   #NIR sul rosso e scalo gli altri
im.plotRGB(stacksent, r=3, g=4, b=2)
im.plotRGB(stacksent, r=3, g=2, b=4)

#visualizzazione delle 2 foto.
par(mfrow = c(1,2))
im.plotRGB(stacksent, r=3, g=2, b=1)   #visualizzazione reale 
im.plotRGB(stacksent, r=4, g=2, b=1)   # NIR sul rosso

dev.off()
im.plotRGB(stacksent, r=4, g=3, b=2)   #NIR sul rosso e scalo gli altri
par(mfrow = c(1,3))
im.plotRGB(stacksent, r=4, g=3, b=2)   
im.plotRGB(stacksent, r=4, g=2, b=1)
im.plotRGB(stacksent, r=3, g=2, b=1)   #visualizzazione reale 

dev.off()
#NIR nel verde
im.plotRGB(stacksent, r=3, g=4, b=2)   

#NIR nel blu
im.plotRGB(stacksent, r=3, g=2, b=4)   #suolo nudo giallo

#multiframe finale
par(mfrow = c(2,2))
im.plotRGB(stacksent, r=3, g=2, b=4)  # nir su blu
im.plotRGB(stacksent, r=3, g=4, b=2)  #NIR su verde
im.plotRGB(stacksent, r=4, g=3, b=2)  #nir su rosso
im.plotRGB(stacksent, r=3, g=2, b=1) #colori naturali

pairs(stacksent) # per visualizzare tutti i grafici di cui ho bisogno


